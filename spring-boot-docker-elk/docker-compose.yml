version: "3.8"
services:
  spring-boot-app:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: spring-boot-app
    ports:
      - 8080:8080
    networks:
      - backend
    volumes:
      - app_logs:/var/log/spring-boot-docker-elk/
    depends_on:
      - postgres
      - redis
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    ports:
      - 5432:5432
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data/
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - backend
    volumes:
      - redis_data:/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    container_name: elastic
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - cluster.name=docker-cluster
      - discovery.type=single-node
    networks:
      - elk
    volumes:
      - type: volume
        source: elastic_data
        target: /usr/share/elasticsearch/data
  logstash:
    image: docker.elastic.co/logstash/logstash:7.13.1
    container_name: logstash
    ports:
      - 5044:5044
      - 5000:5000
    volumes:
      - type: bind
        source: ./elk/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    networks:
      - elk
      - backend
    restart: on-failure
    depends_on:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.1
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - elk
    restart: on-failure
    depends_on:
      - elasticsearch

networks:
  backend:
    driver: bridge
  elk:
    driver: bridge
volumes:
  app_logs: {}
  postgres_data: {}
  redis_data: {}
  elastic_data: {}
